#pragma once
#include "../../pch.h"
 
#include <wil/filesystem.h>
#include <wil/Result.h>
#include <wil/com.h> 
#include <filesystem>
#include "str.h"

namespace fs = ::std::filesystem;

bool init()
{
  // static const auto  comInitResult = THROW_IF_FAILED( CoInitializeEx(NULL,  COINIT_MULTITHREADED | COINIT_DISABLE_OLE1DDE) );
   return true;
}
static const auto initDone = init();

namespace NT
{

   namespace misc
   { 
      #include "misc.h"
      #include "nameOf.h"
      #include "oplock.h"
      }
   #include "ntcore.h"
   #include "nt.h"
   #include "file.h"
 
}  

namespace x
{
   using regpath =  regpath;
   using unistr =  unistr;
   using strpath = strpath; 
   using ntpath = ntpath;

   using handle = NT::handle;
   using file = NT::file;
   using guid = NT::misc::guidwrapper;
   using oplock = NT::misc::oplock;
   template<typename T>
   using ack = NT::misc::ack<T>;
   using NoCopyAssign = NT::misc::NoCopyAssign;
   namespace signals = NT::signals;
   using namespace NT::wnf;
   using namespace NT::misc;
   using namespace NT::registry ;

   using namespace NT::misc::exportNS;

   template< typename T >
   using threaded = NT::misc::threaded< T >;

   namespace process = NT::process;

   namespace objdir = NT::objdir::exportNS;
   using namespace NT::symlink;
      
   namespace literalNS =  literalNS;
    
   typedef size_t(WINAPI* t_ord)(unsigned long long, unsigned long long, unsigned long long, unsigned long long);                                                        \
       /*
   template<typename ...Ts>
   auto ord15(Ts... ts) {
      
           const static t_ord ordpointer   =(t_ord)  getProcAddressOrThrow((LoadLibrary(L"gpapi.dll"), GetModuleHandle(L"gpapi.dll")), MAKEINTRESOURCEA(115));
           return ordpointer(std::forward< Ts >(ts)...);
   };*/
    
      //   IMPORTAPI(L"gpapi.dll", ForceSyncFgPolicyInternal, void)
       //  IMPORTAPI(L"gpapi.dll", RefreshPolicyExInternal, void)
         //IMPORTAPI(L"gpapi.dll", RefreshPolicyInternal, void)
            //IMPORTAPI(L"gpapi.dll", WaitForUserPolicyForegroundProcessingInternal, void)
         
}