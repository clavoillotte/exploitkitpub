#pragma once
#include "../../../pch.h"  

#include "../str.h"
#include "../misc.h"

#include "wil/result.h"
#include <CimFs.h>
 
#pragma comment(lib, "cimfs.lib")

#define CIMFS_MOUNT 0x220004

auto cimCreate()
{
   auto randomGuid = x::guidwrapper::random_guid();

   CIMFS_IMAGE_HANDLE h;

   THROW_IF_FAILED(CimCreateImage(L"C:\\wcifs\\test", 0, L"wtf", &h));
   CIMFS_STREAM_HANDLE hFile;
   CIMFS_FILE_METADATA metadataFile{ 0x00 };
   metadataFile.FileSize = 999;
 
   THROW_IF_FAILED( CimCreateFile(h, L"file", &metadataFile, &hFile) );
   ::std::vector<char> vec;
   vec.resize(999);
   memset(&vec[0], 33, 999);

   CimWriteStream(hFile, &vec[0], 999);

   CimCloseStream(hFile);

   THROW_IF_FAILED(CimCommitImage(h));
   (CimCloseImage(h));

   THROW_IF_FAILED(CimMountImage(L"\\??\\C:\\wcifs\\test", L"wtf", CIM_MOUNT_IMAGE_NONE, randomGuid));
   std::wcout <<L"\\\\?\\Volume" << randomGuid << std::endl;

}

auto cimMountImg(std::wstring path,std::wstring filename) {
   auto randomGuid = x::guidwrapper::random_guid();
   THROW_IF_FAILED( CimMountImage( path.c_str(), filename.c_str(), CIM_MOUNT_IMAGE_NONE, randomGuid ) );
   std::wcout << L"\\\\?\\Volume" << randomGuid << std::endl;
}


auto cimUnMountImg( std::wstring guid ) {
   THROW_IF_FAILED( CimDismountImage(x::guidwrapper{guid.c_str()}) );
}